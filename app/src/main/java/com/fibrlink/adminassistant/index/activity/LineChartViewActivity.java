package com.fibrlink.adminassistant.index.activity;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;

import com.fibrlink.adminassistant.R;
import com.fibrlink.adminassistant.global.activity.CustomActivityManager;
import com.fibrlink.adminassistant.global.tools.DataTools;
import com.fibrlink.adminassistant.login.activity.LoginActivity;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.listener.LineChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.LineChartView;


public class LineChartViewActivity extends Activity {

    //线性折线图实例
    private LineChartView lineChartView;
    private List<PointValue> mPointValues = null;
    private List<AxisValue> mAxisXValues = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //添加Activity到管理类中
        CustomActivityManager.addActivity(this);
        //添加view
        setContentView(R.layout.activity_main);

        lineChartView = (LineChartView) findViewById(R.id.chart);

        initLineChartView();

    }

    private void initLineChartView() {
        // Generate some random values.

        getAxisPoints();

        getAxisXLables();

        generateData();

        Viewport v = new Viewport(lineChartView.getMaximumViewport());
        v.left = mAxisXValues.size()-6;
        v.right = mAxisXValues.size();
        lineChartView.setCurrentViewport(v);

        lineChartView.setZoomEnabled(false);
        lineChartView.setSelected(true);

        lineChartView.setOnValueTouchListener(new LineChartOnValueSelectListener() {

            @Override
            public void onValueDeselected() {

            }

            @Override
            public void onValueSelected(int lineIndex, int pointIndex, PointValue value) {
                CustomActivityManager.finishActivity();
                Intent intent = new Intent();
                intent.setClass(getApplicationContext(), LoginActivity.class);
                startActivity(intent);
                System.out.println("-----" + lineIndex + "----------" + pointIndex + "---------" + value.getY() + "----------" + value.getX());
            }
        });

        // Disable viewport recalculations, see toggleCubic() method for more info.
        lineChartView.setViewportCalculationEnabled(false);
    }

    private void generateData() {

        List<Line> lines;
        lines = new ArrayList<Line>();
        int numberOfLines = 1;
        for (int i = 0; i < numberOfLines; ++i) {

            List<PointValue> values = new ArrayList<PointValue>();

            for (int j = 0; j < mPointValues.size(); ++j) {
                values.add(mPointValues.get(j));
            }

            Line line = new Line(values);
            //线的颜色
            line.setColor(ChartUtils.COLORS[i]);
            //折线图上每个数据点的形状  这里是圆形 （有三种 ：ValueShape.SQUARE  ValueShape.CIRCLE  ValueShape.DIAMOND）
            line.setShape(ValueShape.CIRCLE);
            //曲线是否平滑，即是曲线还是折线
            line.setCubic(false);
            ////是否填充曲线的面积
            line.setFilled(false);
            //曲线的数据坐标是否加上备注
            line.setHasLabels(true);
            //点击数据坐标提示数据
            line.setHasLabelsOnlyForSelected(true);
            //是否用线显示。如果为false 则没有曲线只有点显示
            line.setHasLines(true);
            //是否显示圆点 如果为false 则没有原点只有点显示（每个数据点都是个大的圆点）
            line.setHasPoints(true);
            //设置线的宽度
            line.setStrokeWidth(1);

            lines.add(line);
        }

        LineChartData data = new LineChartData(lines);

        if (true) {
            Axis axisX = new Axis().setHasLines(true);
            axisX.setValues(mAxisXValues);
            Axis axisY = new Axis().setHasLines(false);
            //是否显示左侧Y轴值
            axisY.setAutoGenerated(false);
//            axisX.setName("时间（年-月）");
//            axisY.setName("薪资（圆）");

            data.setAxisXTop(axisX);
            data.setAxisYLeft(null);

        } else {
            data.setAxisXBottom(null);
            data.setAxisYLeft(null);
        }


        data.setValueLabelsTextColor(getResources().getColor(R.color.colorPrimaryDark));
        data.setValueLabelBackgroundEnabled(false);
        data.setBaseValue(Float.NEGATIVE_INFINITY);

        lineChartView.setLineChartData(data);

    }

    /**
     * 设置X 轴的显示
     */
    private void getAxisXLables() {

        mAxisXValues = new ArrayList<AxisValue>();

        for (int i = 0; i < DataTools.date.length; i++) {
            mAxisXValues.add(new AxisValue(i).setLabel(DataTools.date[i]));
        }
    }

    /**
     * 图表的每个点的显示
     *  @author wolf
     *  @time 2017/1/6  10:46
     */
    private void getAxisPoints() {

        mPointValues = new ArrayList<PointValue>();

        for (int i = 0; i < DataTools.score.length; i++) {
            mPointValues.add(new PointValue(i, DataTools.score[i]));
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        lineChartView = null;
        mPointValues = null;
        mAxisXValues = null;
        setContentView(new View(getApplicationContext()));
    }
}
